<?php

namespace Yoda\UserBundle\Repository;

use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository implements UserProviderInterface {

    /**
     * 
     * @param type $username
     * @return User
     */
    public function findOneByUsernameOrEmail($username) {
        return $this->createQueryBuilder('build')
                        ->andWhere('build.username = :username OR build.email = :email')
                        ->setParameter('username', $username)
                        ->setParameter('email', $username)
                        ->getQuery()
                        ->getOneOrNullResult();
    }

    public function loadUserByUsername($username) {
        $user = $this->findOneByUsernameOrEmail($username);
        if(!$user){
            throw new UsernameNotFoundException("No user with $username");
        }
        
        return $user;
    }

    public function refreshUser(UserInterface $user) {
        $class = get_class($user);
        if(!$this->supportsClass($class)){
            throw new UnsupportedException(sprintf('Instance of "%s" are not supported.', $class));
        }
        
        if(!$refreshedUser = $this->find($user->getId()) ) {
            throw new UsernameNotFoundException(sprintf('User with id %s not found', json_encode($class)));
        }
        
        return $refreshedUser;
    }

    public function supportsClass($class) {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }

}
